import feedparser

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
KEYWORDS = ['btc', 'bitcoin', 'eth', 'ethereum', 'etf', 'crypto', 'trump', 'blackrock', 'sec', 'halving', 'spot', 'approval']

# –•—Ä–∞–Ω–∏–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–æ–≤—Ç–æ—Ä–æ–≤
already_sent_titles = set()

def fetch_coindesk_news(force_all=False):
    print("üì° –ß—Ç–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ CoinDesk...")
    feed_url = "https://www.coindesk.com/arc/outboundfeeds/rss/"
    feed = feedparser.parse(feed_url)

    filtered = []
    for entry in feed.entries:
        published = entry.get("published", "")
        title = entry.get("title", "")
        link = entry.get("link", "")
        print(f"‚Üí –ü—Ä–æ–≤–µ—Ä–∫–∞: {title}")

        if any(keyword.lower() in title.lower() for keyword in KEYWORDS):
            if force_all or title not in already_sent_titles:
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {title}")
                filtered.append({
                    "title": title,
                    "link": link,
                    "published": published
                })
                already_sent_titles.add(title)
            else:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ): {title}")
        else:
            print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤): {title}")
    return filtered

def fetch_crypto_panic_news():
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –ø–æ–∑–∂–µ
    return []

def fetch_all_news(force_all=False):
    print("‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º...")
    news = fetch_coindesk_news(force_all=force_all) + fetch_crypto_panic_news()
    print(f"üóû –í—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(news)}")
    return news

def format_news_message(item):
    return (
        f"üì∞ <b>{item['title']}</b>\n"
        f"üóì <i>{item['published']}</i>\n"
        f"üîó <a href='{item['link']}'>–ß–∏—Ç–∞—Ç—å</a>"
    )
