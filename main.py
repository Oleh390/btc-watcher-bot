import os
import asyncio
from binance import AsyncClient
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
from decimal import Decimal, ROUND_DOWN

load_dotenv()

PAIR = "BTCUSDT"
PERCENTS = [0.2, 0.4, 2, 4]  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
LIMIT = 1000

def fmt(num, digits=2):
    if isinstance(num, float):
        num = Decimal(str(num))
    if num >= 1000:
        return f"{num.quantize(Decimal('1'), rounding=ROUND_DOWN):,}".replace(',', ' ')
    fmtstr = f"{{0:.{digits}f}}"
    return fmtstr.format(float(num))

def get_side_dominance(bid_volume, ask_volume):
    if bid_volume > ask_volume:
        return "buy", bid_volume, ask_volume, int((bid_volume - ask_volume) / (bid_volume + ask_volume) * 100)
    else:
        return "sell", bid_volume, ask_volume, int((ask_volume - bid_volume) / (bid_volume + ask_volume) * 100)

async def get_order_book():
    client = await AsyncClient.create()
    depth = await client.get_order_book(symbol=PAIR, limit=LIMIT)
    await client.close_connection()
    bids = [(float(price), float(amount)) for price, amount in depth["bids"]]
    asks = [(float(price), float(amount)) for price, amount in depth["asks"]]
    return bids, asks

def calc_levels(bids, asks, percent, last_price):
    p = percent / 100
    min_price = last_price * (1 - p)
    max_price = last_price * (1 + p)

    bids_filtered = [b for b in bids if min_price <= b[0] <= last_price]
    asks_filtered = [a for a in asks if last_price <= a[0] <= max_price]
    bid_levels = len(bids_filtered)
    ask_levels = len(asks_filtered)
    bid_volume = sum(b[1] for b in bids_filtered)
    ask_volume = sum(a[1] for a in asks_filtered)
    best_bid = max(bids_filtered, default=(0, 0))[0] if bids_filtered else 0
    best_ask = min(asks_filtered, default=(0, 0))[0] if asks_filtered else 0
    support = min(bids_filtered, default=(0, 0))[0] if bids_filtered else 0
    resistance = max(asks_filtered, default=(0, 0))[0] if asks_filtered else 0
    return {
        "percent": percent,
        "min_price": min_price,
        "max_price": max_price,
        "bid_levels": bid_levels,
        "ask_levels": ask_levels,
        "bid_volume": bid_volume,
        "ask_volume": ask_volume,
        "best_bid": best_bid,
        "best_ask": best_ask,
        "support": support,
        "resistance": resistance,
    }

def get_emoji(side):
    return "üü¢" if side == "buy" else "üî¥"

async def handle_watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    bids, asks = await get_order_book()
    last_price = asks[0][0] if asks and bids and asks[0][0] > bids[0][0] else (bids[0][0] if bids else 0)
    book_lines = ["üìä BTC/USDT Order Book\n"]

    stats_by_level = {}
    for percent in PERCENTS:
        stats = calc_levels(bids, asks, percent, last_price)
        stats_by_level[percent] = stats

        dominance_side, bid_vol, ask_vol, dom_percent = get_side_dominance(stats["bid_volume"], stats["ask_volume"])
        emoji = get_emoji(dominance_side)
        book_lines.append(
            f"üîµ ¬±{percent}%\n"
            f"üìâ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {fmt(stats['resistance'])} $ ({fmt(stats['ask_volume'], 0)} BTC)\n"
            f"üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {fmt(stats['support'])} $ ({fmt(stats['bid_volume'], 0)} BTC)\n"
            f"üìà –î–∏–∞–ø–∞–∑–æ–Ω: {fmt(stats['min_price'])} ‚Äî {fmt(stats['max_price'])}\n"
            f"üü• ask —É—Ä–æ–≤–Ω–µ–π: {stats['ask_levels']} | üü© bid —É—Ä–æ–≤–Ω–µ–π: {stats['bid_levels']}\n"
            f"üí∞ –û–±—ä—ë–º: üîª {fmt(stats['ask_volume'])} BTC | üî∫ {fmt(stats['bid_volume'])} BTC\n"
            f"{emoji*2} {'–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏' if dominance_side == 'buy' else '–ü—Ä–æ–¥–∞–≤—Ü—ã'} –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –Ω–∞ {abs(dom_percent)}%\n"
        )

    # –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è "–¢–æ—Ä–≥–æ–≤–æ–π –∏–¥–µ–∏"
    best_percent = max(PERCENTS, key=lambda p: abs(stats_by_level[p]["bid_volume"] - stats_by_level[p]["ask_volume"]))
    best = stats_by_level[best_percent]
    dominance_side, _, _, dom_percent = get_side_dominance(best["bid_volume"], best["ask_volume"])
    scenario = (
        f"–õ–æ–Ω–≥ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {fmt(best['support'])}‚Äì{fmt(best['best_bid'])} $"
        if dominance_side == "buy"
        else f"–®–æ—Ä—Ç –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è {fmt(best['best_ask'])}‚Äì{fmt(best['resistance'])} $"
    )
    stop_loss = (
        f"–ù–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Üí {fmt(best['support'] * 0.995)} $"
        if dominance_side == "buy"
        else f"–í—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ‚Üí {fmt(best['resistance'] * 1.005)} $"
    )
    take_profit = (
        f"{fmt(best['best_bid'])}‚Äì{fmt(best['best_bid'] + (best['best_bid'] * 0.5/100))} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)"
        if dominance_side == "buy"
        else f"{fmt(best['best_ask'])}‚Äì{fmt(best['best_ask'] - (best['best_ask'] * 0.5/100))} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)"
    )

    book_lines.append(
        "\nüìå üí° <b>–¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è (–∞–≤—Ç–æ-–≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞):</b>\n"
        f'<pre>–ü–∞—Ä–∞–º–µ—Ç—Ä         | –ó–Ω–∞—á–µ–Ω–∏–µ\n'
        f'------------------|-------------------------------\n'
        f'‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π       | {scenario}\n'
        f'‚õî –°—Ç–æ–ø-–ª–æ—Å—Å      | {stop_loss}\n'
        f'üéØ –¶–µ–ª—å           | {take_profit}\n'
        f'üîé –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä    | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º / —Å–≤–µ—á–æ–π 1‚Äì5–º\n'
        f'</pre>\n'
        f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª –¥–∏–∞–ø–∞–∑–æ–Ω ¬±{best_percent}%, '
        f'—Ç.–∫. –∑–¥–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π {"–æ–±—ä—ë–º –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É" if dominance_side == "buy" else "–æ–±—ä—ë–º –Ω–∞ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ"} '
        f'–∏ —è–≤–Ω–æ–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {"–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π" if dominance_side == "buy" else "–ø—Ä–æ–¥–∞–≤—Ü–æ–≤"} ({abs(dom_percent)}%)'
    )

    await update.message.reply_text(
        "\n".join(book_lines), parse_mode="HTML"
    )

if __name__ == "__main__":
    TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("watch", handle_watch))
    app.run_polling()
