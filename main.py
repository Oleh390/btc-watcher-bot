import asyncio
from binance import AsyncClient
from decimal import Decimal
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = int(os.getenv("TELEGRAM_USER_ID", "0"))
SYMBOL = "BTCUSDT"
DEPTH_LIMIT = 1000

RANGES = [0.002, 0.004, 0.02, 0.04]  # ¬±0.2%, ¬±0.4%, ¬±2%, ¬±4%

async def get_order_book():
    async with AsyncClient() as client:
        depth = await client.get_order_book(symbol=SYMBOL, limit=DEPTH_LIMIT)
        return depth

def calc_range(price, pct):
    delta = price * pct
    return float(price - delta), float(price + delta)

def find_max_level(levels, lower, upper, is_bid=True):
    # –ò—â–µ–º –ª–∏–º–∏—Ç–∫—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –æ–±—ä—ë–º–æ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    max_qty = 0
    max_price = None
    total_qty = 0
    for price, qty in levels:
        if lower <= price <= upper:
            total_qty += qty
            if qty > max_qty:
                max_qty = qty
                max_price = price
    return max_price, max_qty, total_qty

async def handle_watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    depth = await get_order_book()
    asks = [(float(price), float(qty)) for price, qty in depth["asks"]]
    bids = [(float(price), float(qty)) for price, qty in depth["bids"]]

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É –ª—É—á—à–∏–º –±–∏–¥–æ–º –∏ –∞—Å–∫–æ–º
    best_bid = bids[0][0]
    best_ask = asks[0][0]
    mid_price = (best_bid + best_ask) / 2

    messages = []
    stats = {}

    for pct in RANGES:
        low, high = calc_range(mid_price, pct)
        # ask: —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ = min —Ü–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å max –æ–±—ä—ë–º–æ–º
        ask_price, ask_qty, ask_sum = find_max_level(asks, mid_price, high, is_bid=False)
        # bid: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ = max —Ü–µ–Ω–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å max –æ–±—ä—ë–º–æ–º
        bid_price, bid_qty, bid_sum = find_max_level(bids, low, mid_price, is_bid=True)

        ask_levels = [price for price, qty in asks if mid_price <= price <= high]
        bid_levels = [price for price, qty in bids if low <= price <= mid_price]

        # –û–±—ä—ë–º—ã –≤ $
        ask_usd = ask_sum * mid_price
        bid_usd = bid_sum * mid_price

        dom_side = "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" if bid_sum > ask_sum else "–ü—Ä–æ–¥–∞–≤—Ü—ã"
        dom_pct = int(100 * abs(bid_sum - ask_sum) / (bid_sum + ask_sum)) if (bid_sum + ask_sum) > 0 else 0
        color = "üü¢" if dom_side == "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" else "üî¥"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É
        label = f"¬±{pct*100:.1f}%"
        msg = (
            f"\nüîµ {label}\n"
            f"üìâ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {ask_price:,.2f} $ ({int(ask_qty)} BTC)\n"
            f"üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {bid_price:,.2f} $ ({int(bid_qty)} BTC)\n"
            f"üìà –î–∏–∞–ø–∞–∑–æ–Ω: {low:,.2f} ‚Äî {high:,.2f}\n"
            f"üü• ask —É—Ä–æ–≤–Ω–µ–π: {len(ask_levels)} | üü© bid —É—Ä–æ–≤–Ω–µ–π: {len(bid_levels)}\n"
            f"üí∞ –û–±—ä—ë–º: üîª {ask_sum:.2f} BTC / ${ask_usd:,.0f} | üî∫ {bid_sum:.2f} BTC / ${bid_usd:,.0f}\n"
            f"{color*2} {dom_side} –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –Ω–∞ {dom_pct}%"
        )
        messages.append(msg)
        stats[pct] = {
            "dom_pct": dom_pct, "dom_side": dom_side,
            "support": (bid_price, bid_qty), "resist": (ask_price, ask_qty),
            "low": low, "high": high
        }

    # –ê–≤—Ç–æ-–≤—ã–±–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–π –∏–¥–µ–∏: –∏—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å –º–∞–∫—Å –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–Ω–æ –Ω–µ 0.2%, –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–∞)
    best_pct = max(stats, key=lambda x: stats[x]["dom_pct"])
    idea = stats[best_pct]
    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ–µ (>5%), –∏–Ω–∞—á–µ –Ω–µ –¥–∞–≤–∞—Ç—å –∏–¥–µ—é
    trade_idea = ""
    if idea["dom_pct"] > 5:
        side = "–õ–æ–Ω–≥" if idea["dom_side"] == "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" else "–®–æ—Ä—Ç"
        support_from = int(idea["support"][0] - idea["support"][1])
        support_to = int(idea["support"][0])
        stop = int(idea["support"][0] - 500 if side == "–õ–æ–Ω–≥" else idea["support"][0] + 500)
        target_from = int(idea["support"][0] + 600 if side == "–õ–æ–Ω–≥" else idea["support"][0] - 600)
        target_to = int(idea["support"][0] + 1100 if side == "–õ–æ–Ω–≥" else idea["support"][0] - 1100)
        trade_idea = (
            "\n\nüìåüí° <b>–¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è (–∞–≤—Ç–æ-–≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞):</b>\n"
            "<pre>–ü–∞—Ä–∞–º–µ—Ç—Ä         | –ó–Ω–∞—á–µ–Ω–∏–µ\n"
            "------------------|-------------------------------\n"
            f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π       | {side} –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {support_from}-{support_to} $\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å      | {'–ù–∏–∂–µ' if side=='–õ–æ–Ω–≥' else '–í—ã—à–µ'} –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Üí {stop} $\n"
            f"üéØ –¶–µ–ª—å           | {target_from}-{target_to} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)\n"
            f"üîé –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä    | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º / —Å–≤–µ—á–æ–π 1‚Äì5–º\n"
            "</pre>"
            f"\n<i>–ë–æ—Ç –≤—ã–±—Ä–∞–ª –¥–∏–∞–ø–∞–∑–æ–Ω {best_pct*100:.1f}%, —Ç.–∫. –∑–¥–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –Ω–∞ {'–ø–æ–¥–¥–µ—Ä–∂–∫—É' if side=='–õ–æ–Ω–≥' else '—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ'} –∏ —è–≤–Ω–æ–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ {idea['dom_side'].lower()}.</i>"
        )

    await update.message.reply_text(
        f"üìä BTC/USDT Order Book\n" + "\n".join(messages) + trade_idea,
        parse_mode="HTML"
    )

if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("watch", handle_watch))
    app.run_polling()
