import asyncio
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from dotenv import load_dotenv
from news_handler import fetch_all_news, format_news_message

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
USER_ID = os.getenv("TELEGRAM_USER_ID")

# –ö–æ–º–∞–Ω–¥–∞ /news ‚Äî —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /news")
    news_list = fetch_all_news()
    if not news_list:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    for item in news_list:
        msg = format_news_message(item)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=msg, parse_mode="HTML")

# –ö–æ–º–∞–Ω–¥–∞ /news_all ‚Äî –≤—Å–µ–≥–¥–∞ –≤—Å–µ
async def news_all_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /news_all")
    news_list = fetch_all_news(force_all=True)
    if not news_list:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π.")
    for item in news_list:
        msg = format_news_message(item)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=msg, parse_mode="HTML")

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
async def run_news_scheduler(app):
    while True:
        print("‚è∞ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ —Ç–∞–π–º–µ—Ä—É...")
        try:
            news_list = fetch_all_news()
            for item in news_list:
                msg = format_news_message(item)
                await app.bot.send_message(chat_id=USER_ID, text=msg, parse_mode="HTML")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        await asyncio.sleep(600)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("news", news_command))
    app.add_handler(CommandHandler("news_all", news_all_command))
    asyncio.create_task(run_news_scheduler(app))
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await app.run_polling()

if __name__ == "__main__":
    import nest_asyncio
    nest_asyncio.apply()
    asyncio.get_event_loop().run_until_complete(main())
