import asyncio
import logging
from decimal import Decimal
from binance import AsyncClient
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import os
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

depth_ranges = {
    "Â±0.2%": 0.002,
    "Â±2%": 0.02,
    "Â±4%": 0.04,
    "Â±10%": 0.10,
    "Â±20%": 0.20,
}

def calculate_stats(depth, price, pct):
    lower = price * (Decimal("1") - Decimal(pct))
    upper = price * (Decimal("1") + Decimal(pct))
    ask_volume = bid_volume = 0
    ask_value = bid_value = 0
    ask_levels = bid_levels = 0
    for order in depth["asks"]:
        p, q = Decimal(order[0]), Decimal(order[1])
        if lower <= p <= upper:
            ask_volume += float(q)
            ask_value += float(p * q)
            ask_levels += 1
    for order in depth["bids"]:
        p, q = Decimal(order[0]), Decimal(order[1])
        if lower <= p <= upper:
            bid_volume += float(q)
            bid_value += float(p * q)
            bid_levels += 1
    return {
        "ask_volume": ask_volume,
        "ask_value": ask_value,
        "ask_levels": ask_levels,
        "bid_volume": bid_volume,
        "bid_value": bid_value,
        "bid_levels": bid_levels,
        "lower": lower,
        "upper": upper,
    }

def format_number(val, digits=2):
    return f"{val:,.{digits}f}".replace(",", " ")

async def get_orderbook_stats():
    client = await AsyncClient.create()
    try:
        ticker = await client.get_symbol_ticker(symbol="BTCUSDT")
        current_price = Decimal(ticker["price"])
        depth = await client.get_order_book(symbol="BTCUSDT", limit=1000)
        result = {}
        for label, pct in depth_ranges.items():
            stats = calculate_stats(depth, current_price, pct)
            result[label] = stats
        return result, current_price
    finally:
        await client.close_connection()

async def handle_watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stats, price = await get_orderbook_stats()
        lines = ["ðŸ“Š <b>BTC/USDT Order Book</b>\\n"]
        for label, s in stats.items():
            dom = s["bid_value"] - s["ask_value"]
            total = s["bid_value"] + s["ask_value"]
            dom_pct = int((dom / total) * 100) if total > 0 else 0
            emoji = "ðŸŸ¢ ÐŸÐ¾ÐºÑƒÐ¿Ð°Ñ‚ÐµÐ»Ð¸" if dom_pct >= 0 else "ðŸ”´ ÐŸÑ€Ð¾Ð´Ð°Ð²Ñ†Ñ‹"
            lines.append(
                f"ðŸ”µ {label}\\n"
                f"ðŸ“‰ Ð¡Ð¾Ð¿Ñ€Ð¾Ñ‚Ð¸Ð²Ð»ÐµÐ½Ð¸Ðµ: {format_number(s['upper'])} $ ({s['ask_volume']:.0f} BTC)\\n"
                f"ðŸ“Š ÐŸÐ¾Ð´Ð´ÐµÑ€Ð¶ÐºÐ°: {format_number(s['lower'])} $ ({s['bid_volume']:.0f} BTC)\\n"
                f"ðŸ“ˆ Ð”Ð¸Ð°Ð¿Ð°Ð·Ð¾Ð½: {format_number(s['lower'])} â€” {format_number(s['upper'])}\\n"
                f"ðŸŸ¥ ask ÑƒÑ€Ð¾Ð²Ð½ÐµÐ¹: {s['ask_levels']} | ðŸŸ© bid ÑƒÑ€Ð¾Ð²Ð½ÐµÐ¹: {s['bid_levels']}\\n"
                f"ðŸ’° ÐžÐ±ÑŠÑ‘Ð¼: ðŸ”» {s['ask_volume']:.2f} BTC / ${format_number(s['ask_value'], 0)} | "
                f"ðŸ”º {s['bid_volume']:.2f} BTC / ${format_number(s['bid_value'], 0)}\\n"
                f"{emoji} Ð´Ð¾Ð¼Ð¸Ð½Ð¸Ñ€ÑƒÑŽÑ‚ Ð½Ð° {abs(dom_pct)}%\\n"
            )
        await update.message.reply_text("\\n".join(lines), parse_mode="HTML")
    except Exception as e:
        logging.exception("ÐžÑˆÐ¸Ð±ÐºÐ° Ð² /watch")
        await update.message.reply_text("ÐŸÑ€Ð¾Ð¸Ð·Ð¾ÑˆÐ»Ð° Ð¾ÑˆÐ¸Ð±ÐºÐ°. ÐŸÐ¾Ð¿Ñ€Ð¾Ð±ÑƒÐ¹ Ð¿Ð¾Ð·Ð¶Ðµ.")

if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("watch", handle_watch))
    app.run_polling()
