import asyncio
from decimal import Decimal
import os
from binance.async_client import AsyncClient
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
SYMBOL = "BTCUSDT"
DEPTH_LIMIT = 1000

LEVELS = [0.2, 0.4, 2, 4]  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
FRACTIONS = [lvl / 100 for lvl in LEVELS]

def format_number(n):
    return f"{n:,.2f}".replace(",", " ")

def calc_levels(bids, asks, price, fraction):
    price = Decimal(price)
    delta = price * Decimal(fraction)
    lower = price - delta
    upper = price + delta

    bids_filtered = [b for b in bids if Decimal(b[0]) >= lower]
    asks_filtered = [a for a in asks if Decimal(a[0]) <= upper]

    bid_vol = sum(Decimal(b[1]) for b in bids_filtered)
    ask_vol = sum(Decimal(a[1]) for a in asks_filtered)

    support = min(bids_filtered, key=lambda b: Decimal(b[0])) if bids_filtered else bids[0]
    resistance = max(asks_filtered, key=lambda a: Decimal(a[0])) if asks_filtered else asks[0]

    return {
        "support_price": float(support[0]),
        "support_vol": float(support[1]),
        "resist_price": float(resistance[0]),
        "resist_vol": float(resistance[1]),
        "bid_vol": float(bid_vol),
        "ask_vol": float(ask_vol),
        "bid_levels": len(bids_filtered),
        "ask_levels": len(asks_filtered),
        "range": (float(lower), float(upper))
    }

async def get_order_book():
    client = await AsyncClient.create()
    try:
        depth = await client.get_order_book(symbol=SYMBOL, limit=DEPTH_LIMIT)
        return depth
    finally:
        await client.close_connection()

async def handle_watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    depth = await get_order_book()
    bids = depth['bids']
    asks = depth['asks']
    mid_price = (Decimal(bids[0][0]) + Decimal(asks[0][0])) / 2

    results = []
    for fraction in FRACTIONS:
        stats = calc_levels(bids, asks, mid_price, fraction)
        dom_side = "üü¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" if stats['bid_vol'] > stats['ask_vol'] else "üî¥ –ü—Ä–æ–¥–∞–≤—Ü—ã"
        dom_percent = abs(stats['bid_vol'] - stats['ask_vol']) / max(stats['bid_vol'], stats['ask_vol']) * 100
        msg = f"""üîµ ¬±{fraction*100:.1f}%
üìâ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {format_number(stats['resist_price'])} $ ({int(stats['resist_vol'])} BTC)
üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {format_number(stats['support_price'])} $ ({int(stats['support_vol'])} BTC)
üìà –î–∏–∞–ø–∞–∑–æ–Ω: {format_number(stats['range'][0])} ‚Äî {format_number(stats['range'][1])}
üü• ask —É—Ä–æ–≤–Ω–µ–π: {stats['ask_levels']} | üü© bid —É—Ä–æ–≤–Ω–µ–π: {stats['bid_levels']}
üí∞ –û–±—ä—ë–º: üîª {format_number(stats['ask_vol'])} BTC | üî∫ {format_number(stats['bid_vol'])} BTC
{dom_side} –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –Ω–∞ {int(dom_percent)}%
"""
        results.append((msg, stats, dom_side, dom_percent, fraction))

    # –ê–≤—Ç–æ-–≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π –∏–¥–µ–∏
    # –ö—Ä–∏—Ç–µ—Ä–∏–π: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É/—Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –∏ >10% –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    best = max(results, key=lambda r: r[3])
    _, best_stats, best_side, _, best_fraction = best

    # –¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è (–ª–æ–Ω–≥ –∏–ª–∏ —à–æ—Ä—Ç)
    if "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" in best_side:
        scenario = f"–õ–æ–Ω–≥ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {format_number(best_stats['support_price']-25)}‚Äì{format_number(best_stats['support_price'])} $"
        sl = f"–ù–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Üí {format_number(best_stats['support_price']-50)} $"
        tp = f"{format_number(best_stats['support_price'])}‚Äì{format_number(best_stats['support_price']+500)} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)"
    else:
        scenario = f"–®–æ—Ä—Ç –æ—Ç —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è {format_number(best_stats['resist_price'])}‚Äì{format_number(best_stats['resist_price']+25)} $"
        sl = f"–í—ã—à–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è ‚Üí {format_number(best_stats['resist_price']+50)} $"
        tp = f"{format_number(best_stats['resist_price']-500)}‚Äì{format_number(best_stats['resist_price'])} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)"

    summary = "\n".join(r[0] for r in results)
    trade_idea = f"""üìå <b>–¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è (–∞–≤—Ç–æ-–≤—ã–±–æ—Ä –¥–∏–∞–ø–∞–∑–æ–Ω–∞)</b>:
–ë–æ—Ç –≤—ã–±—Ä–∞–ª –¥–∏–∞–ø–∞–∑–æ–Ω ¬±{best_fraction*100:.1f}%, —Ç.–∫. –∑–¥–µ—Å—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä—ë–º –∏ —è–≤–Ω–æ–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω—ã.

<pre>–ü–∞—Ä–∞–º–µ—Ç—Ä      | –ó–Ω–∞—á–µ–Ω–∏–µ
----------------|---------------------------------------
‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π     | {scenario}
‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å    | {sl}
üéØ –¶–µ–ª—å         | {tp}
üîé –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä  | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º / —Å–≤–µ—á–æ–π 1‚Äì5–º
</pre>"""

    await update.message.reply_text("üìä BTC/USDT Order Book\n\n" + summary + "\n" + trade_idea, parse_mode="HTML")

if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("watch", handle_watch))
    app.run_polling()
