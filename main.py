import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from binance.client import Client
from decimal import Decimal

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
USER_ID = int(os.environ.get("TELEGRAM_USER_ID"))

BINANCE_API_KEY = os.environ.get("BINANCE_API_KEY", "")
BINANCE_API_SECRET = os.environ.get("BINANCE_API_SECRET", "")
client = Client(BINANCE_API_KEY, BINANCE_API_SECRET)

PCT = 0.005  # 0.5%

def get_orderbook_stats(symbol="BTCUSDT", pct=0.005):
    depth = client.get_order_book(symbol=symbol, limit=1000)
    bids = [(Decimal(price), Decimal(qty)) for price, qty in depth["bids"]]
    asks = [(Decimal(price), Decimal(qty)) for price, qty in depth["asks"]]
    price = (bids[0][0] + asks[0][0]) / 2  # mid price

    upper = price * (1 + Decimal(pct))
    lower = price * (1 - Decimal(pct))

    ask_within = [(p, q) for p, q in asks if p <= upper]
    bid_within = [(p, q) for p, q in bids if p >= lower]

    res = {
        "resistance": float(max(ask_within, default=(0, 0))[0]) if ask_within else None,
        "resistance_qty": float(sum(q for p, q in ask_within)),
        "support": float(min(bid_within, default=(0, 0))[0]) if bid_within else None,
        "support_qty": float(sum(q for p, q in bid_within)),
        "range_low": float(min(bid_within, default=(price,))[0]),
        "range_high": float(max(ask_within, default=(price,))[0]),
        "ask_lvls": len(ask_within),
        "bid_lvls": len(bid_within),
        "ask_vol": float(sum(q for p, q in ask_within)),
        "bid_vol": float(sum(q for p, q in bid_within)),
        "ask_usd": float(sum(p*q for p, q in ask_within)),
        "bid_usd": float(sum(p*q for p, q in bid_within)),
        "side": "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" if sum(q for p, q in bid_within) > sum(q for p, q in ask_within) else "–ü—Ä–æ–¥–∞–≤—Ü—ã",
        "side_pct": abs(sum(q for p, q in bid_within) - sum(q for p, q in ask_within)) / max(sum(q for p, q in bid_within), 1) * 100,
        "mid_price": float(price)
    }
    return res

def make_message(stats, symbol="BTCUSDT"):
    asset = symbol.replace("USDT", "")
    msg = (
        f"üìä {asset}/USDT Order Book (¬±0.5%)\n\n"
        f"üíµ –¶–µ–Ω–∞: {stats['mid_price']:.2f} $\n"
        f"üìâ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {stats['resistance']:.2f} $ ({stats['resistance_qty']:.2f} {asset})\n"
        f"üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {stats['support']:.2f} $ ({stats['support_qty']:.2f} {asset})\n"
        f"üìà –î–∏–∞–ø–∞–∑–æ–Ω: {stats['range_low']:.2f} ‚Äî {stats['range_high']:.2f}\n"
        f"üü• ask —É—Ä–æ–≤–Ω–µ–π: {stats['ask_lvls']} | üü© bid —É—Ä–æ–≤–Ω–µ–π: {stats['bid_lvls']}\n"
        f"üí∞ –û–±—ä—ë–º: üîª {stats['ask_vol']:.2f} {asset} / ${stats['ask_usd']:.0f} | üî∫ {stats['bid_vol']:.2f} {asset} / ${stats['bid_usd']:.0f}\n"
        f"üü¢ {'–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏' if stats['side']=='–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏' else '–ü—Ä–æ–¥–∞–≤—Ü—ã'} –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –Ω–∞ {int(stats['side_pct'])}%\n\n"
        "üìå –¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è:\n"
        "<pre>–ü–∞—Ä–∞–º–µ—Ç—Ä         | –ó–Ω–∞—á–µ–Ω–∏–µ\n"
        "------------------|-------------------------------\n"
        "‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π       | –õ–æ–Ω–≥ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {support}-{sup_top} $\n"
        "‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å      | –ù–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Üí {stop_loss} $\n"
        "üéØ –¶–µ–ª—å           | {target_min}-{target_max} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)\n"
        "üîé –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä    | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º / —Å–≤–µ—á–æ–π 1‚Äì5–º\n"
        "</pre>\n"
    ).format(
        support=int(stats['support']),
        sup_top=int(stats['support']+25),
        stop_loss=int(stats['support']-50),
        target_min=int(stats['resistance']),
        target_max=int(stats['resistance']+50),
    )
    return msg

async def btc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    stats = get_orderbook_stats("BTCUSDT", PCT)
    msg = make_message(stats, "BTCUSDT")
    await update.message.reply_text(msg, parse_mode="HTML")

async def eth(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != USER_ID:
        await update.message.reply_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    stats = get_orderbook_stats("ETHUSDT", PCT)
    msg = make_message(stats, "ETHUSDT")
    await update.message.reply_text(msg, parse_mode="HTML")

if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("btc", btc))
    app.add_handler(CommandHandler("eth", eth))
    app.run_polling()
