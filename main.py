import os
from decimal import Decimal
from binance.client import Client
from telegram import Bot
from telegram.constants import ParseMode
import asyncio
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_USER_ID")

PAIR = "BTCUSDT"
DEPTH_LIMIT = 1000

# –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
RANGES = [0.002, 0.004, 0.02, 0.04, 0.1]
RANGE_LABELS = ["¬±0.2%", "¬±0.4%", "¬±2%", "¬±4%", "¬±10%"]

client = Client()

def get_order_book(symbol=PAIR, limit=DEPTH_LIMIT):
    order_book = client.get_order_book(symbol=symbol, limit=limit)
    bids = [(Decimal(price), Decimal(amount)) for price, amount, *_ in order_book["bids"]]
    asks = [(Decimal(price), Decimal(amount)) for price, amount, *_ in order_book["asks"]]
    return bids, asks

def aggregate_levels(levels, lower, upper, reverse=False):
    filtered = [l for l in levels if lower <= l[0] <= upper]
    if not filtered:
        return 0, Decimal(0), 0
    if reverse:
        level = max(filtered, key=lambda x: x[0])
    else:
        level = min(filtered, key=lambda x: x[0])
    volume = sum(a for _, a in filtered)
    count = len(filtered)
    return float(level[0]), float(volume), count

def analyze_order_book(bids, asks, price, rng):
    lower = price * (1 - rng)
    upper = price * (1 + rng)
    # –ü–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    bids_in = [b for b in bids if lower <= b[0] < price]
    asks_in = [a for a in asks if price < a[0] <= upper]
    bid_vol = sum(a for _, a in bids_in)
    ask_vol = sum(a for _, a in asks_in)
    bid_val = sum(p * a for p, a in bids_in)
    ask_val = sum(p * a for p, a in asks_in)
    bid_count = len(bids_in)
    ask_count = len(asks_in)
    support = max(bids_in, key=lambda x: x[0], default=(0, 0))
    resistance = min(asks_in, key=lambda x: x[0], default=(0, 0))
    dom_side = "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" if bid_vol > ask_vol else "–ü—Ä–æ–¥–∞–≤—Ü—ã"
    dom_percent = abs(int(100 * (bid_vol - ask_vol) / (bid_vol + ask_vol))) if (bid_vol + ask_vol) else 0
    return {
        "support": support,
        "resistance": resistance,
        "bid_vol": bid_vol,
        "ask_vol": ask_vol,
        "bid_val": bid_val,
        "ask_val": ask_val,
        "bid_count": bid_count,
        "ask_count": ask_count,
        "lower": lower,
        "upper": upper,
        "dom_side": dom_side,
        "dom_percent": dom_percent
    }

def format_value(val, d=2):
    if val == 0:
        return "‚Äî"
    return f"{val:,.{d}f}".replace(",", " ")

async def send_signal():
    bids, asks = get_order_book()
    price = float(asks[0][0] + bids[0][0]) / 2
    lines = [f"üìä BTC/USDT Order Book\n"]

    all_stats = []

    for rng, label in zip(RANGES, RANGE_LABELS):
        stats = analyze_order_book(bids, asks, price, rng)
        # –§–æ—Ä–º–∞—Ç
        lines.append(
            f"\nüîµ {label}\n"
            f"üìâ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {format_value(stats['resistance'][0])} $ ({format_value(stats['resistance'][1])} BTC)"
            f"\nüìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {format_value(stats['support'][0])} $ ({format_value(stats['support'][1])} BTC)"
            f"\nüìà –î–∏–∞–ø–∞–∑–æ–Ω: {format_value(stats['lower'])} ‚Äî {format_value(stats['upper'])}"
            f"\nüü• ask —É—Ä–æ–≤–Ω–µ–π: {stats['ask_count']} | üü© bid —É—Ä–æ–≤–Ω–µ–π: {stats['bid_count']}"
            f"\nüí∞ –û–±—ä—ë–º: üîª {format_value(stats['ask_vol'])} BTC / ${format_value(stats['ask_val'], 0)} | "
            f"üî∫ {format_value(stats['bid_vol'])} BTC / ${format_value(stats['bid_val'], 0)}"
            f"\n{'üü¢' if stats['dom_side']=='–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏' else 'üî¥'} {stats['dom_side']} –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –Ω–∞ {stats['dom_percent']}%"
        )
        all_stats.append(stats)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –∏–¥–µ—é (–ø—Ä–∏–º–µ—Ä –¥–ª—è –ª–æ–Ω–≥–∞)
    idea = all_stats[0]  # ¬±0.2%
    if idea['dom_side'] == '–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏' and idea['support'][0] > 0:
        scenario = f"–õ–æ–Ω–≥ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {format_value(idea['support'][0]-25, 0)}‚Äì{format_value(idea['support'][0], 0)} $"
        stop_loss = f"–ù–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Üí {format_value(idea['support'][0]-50, 0)} $"
        target = f"{format_value(idea['support'][0]+50, 0)}‚Äì{format_value(idea['support'][0]+100, 0)} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)"
        filter_text = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º / —Å–≤–µ—á–æ–π 1‚Äì5–º"
        lines.append("\nüìå üí° <b>–¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è:</b>")
        lines.append(
            "<pre>–ü–∞—Ä–∞–º–µ—Ç—Ä         | –ó–Ω–∞—á–µ–Ω–∏–µ\n"
            "------------------|-------------------------------\n"
            f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π       | {scenario}\n"
            f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å      | {stop_loss}\n"
            f"üéØ –¶–µ–ª—å           | {target}\n"
            f"üîé –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä    | {filter_text}\n"
            "</pre>"
        )

    await Bot(token=TOKEN).send_message(
        chat_id=CHAT_ID,
        text="\n".join(lines),
        parse_mode=ParseMode.HTML
    )

if __name__ == "__main__":
    asyncio.run(send_signal())
