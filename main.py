
import os
from decimal import Decimal
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import aiohttp

load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
symbol = "BTCUSDT"

depth_levels = {
    "¬±0.2%": 0.002,
    "¬±2%": 0.02,
    "¬±4%": 0.04,
    "¬±10%": 0.10
}

async def fetch_order_book(session):
    url = f"https://api.binance.com/api/v3/depth?symbol={symbol}&limit=1000"
    async with session.get(url) as response:
        return await response.json()

def calculate_stats(data, price, depth_pct):
    bids = [(Decimal(p), Decimal(q)) for p, q in data['bids']]
    asks = [(Decimal(p), Decimal(q)) for p, q in data['asks']]

    lower = price * (Decimal("1") - depth_pct)
    upper = price * (Decimal("1") + depth_pct)

    filtered_bids = [(p, q) for p, q in bids if lower <= p <= upper]
    filtered_asks = [(p, q) for p, q in asks if lower <= p <= upper]

    buy_volume = sum(p * q for p, q in filtered_bids)
    sell_volume = sum(p * q for p, q in filtered_asks)

    buy_btc = sum(q for _, q in filtered_bids)
    sell_btc = sum(q for _, q in filtered_asks)

    top_support = max([p for p, _ in filtered_bids], default=Decimal("0"))
    top_resistance = min([p for p, _ in filtered_asks], default=Decimal("0"))

    support_btc = sum(q for p, q in filtered_bids if p == top_support)
    resistance_btc = sum(q for p, q in filtered_asks if p == top_resistance)

    dominance = (buy_volume - sell_volume) / (buy_volume + sell_volume + Decimal("0.0001")) * 100
    side = "üü¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç" if dominance > 0 else "üî¥ –ü—Ä–æ–¥–∞–≤—Ü—ã –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç"
    emoji = "üü¢" if dominance > 0 else "üî¥"

    return {
        "range": f"{int(depth_pct*100)}%",
        "support": f"{top_support:.2f} $ ({support_btc:.0f} BTC)",
        "resistance": f"{top_resistance:.2f} $ ({resistance_btc:.0f} BTC)",
        "side": side + f" –Ω–∞ {abs(dominance):.0f}%",
        "emoji": emoji
    }

def generate_summary(stats_by_range):
    bullish = sum(1 for stats in stats_by_range.values() if "–ü–æ–∫—É–ø–∞—Ç–µ–ª–∏" in stats["side"])
    bearish = sum(1 for stats in stats_by_range.values() if "–ü—Ä–æ–¥–∞–≤—Ü—ã" in stats["side"])

    if bullish > bearish:
        return "–û–±—ä—ë–º –ª–∏–º–∏—Ç–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø—Ä–µ–æ–±–ª–∞–¥–∞–µ—Ç –Ω–∞ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —É—Ä–æ–≤–Ω–µ–π, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç."
    elif bearish > bullish:
        return "–ü—Ä–æ–¥–∞–≤—Ü—ã –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω—è—Ö, –≤–æ–∑–º–æ–∂–µ–Ω –æ—Ç–∫–∞—Ç –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ."
    else:
        return "–ë–∞–ª–∞–Ω—Å –º–µ–∂–¥—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–æ–¥–∞–≤—Ü–∞–º–∏ ‚Äî —Ä—ã–Ω–æ–∫ –Ω–µ–π—Ç—Ä–∞–ª–µ–Ω."

async def handle_watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with aiohttp.ClientSession() as session:
        data = await fetch_order_book(session)
        price_data = await session.get(f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}")
        price = Decimal((await price_data.json())['price'])

        stats_by_range = {}
        for label, pct in depth_levels.items():
            stats_by_range[label] = calculate_stats(data, price, Decimal(str(pct)))

        msg = f"üìä BTC/USDT Order Book\n"
        for label in depth_levels.keys():
            stats = stats_by_range[label]
            msg += f"\nüîµ {label}\n"
            msg += f"üìâ –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {stats['resistance']}\n"
            msg += f"üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {stats['support']}\n"
            msg += f"{stats['emoji']} {stats['side']}\n"

        msg += f"\nüß≠ –°–≤–æ–¥–∫–∞:\n{generate_summary(stats_by_range)}"

        await update.message.reply_text(msg)

if __name__ == "__main__":
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("watch", handle_watch))
    app.run_polling()
