from decimal import Decimal
from binance import AsyncClient
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
import asyncio
import os
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.getenv("TELEGRAM_USER_ID")


async def get_orderbook_stats():
    client = await AsyncClient.create()
    depth = await client.get_order_book(symbol='BTCUSDT', limit=1000)
    await client.close_connection()

    asks = [(Decimal(price), Decimal(qty)) for price, qty in depth['asks']]
    bids = [(Decimal(price), Decimal(qty)) for price, qty in depth['bids']]

    mid_price = (asks[0][0] + bids[0][0]) / 2

    ranges = {
        '¬±0.2%': Decimal('0.002'),
        '¬±0.4%': Decimal('0.004'),
        '¬±2%': Decimal('0.02'),
        '¬±4%': Decimal('0.04'),
    }

    lines = ["üìà BTC/USDT Order Book\n"]

    for label, pct in ranges.items():
        lower = mid_price * (1 - pct)
        upper = mid_price * (1 + pct)

        filtered_asks = [(p, q) for p, q in asks if lower <= p <= upper]
        filtered_bids = [(p, q) for p, q in bids if lower <= p <= upper]

        ask_vol = sum(q for _, q in filtered_asks)
        bid_vol = sum(q for _, q in filtered_bids)

        resistance = max(filtered_asks, key=lambda x: x[0], default=(Decimal(0), Decimal(0)))
        support = min(filtered_bids, key=lambda x: x[0], default=(Decimal(0), Decimal(0)))

        ask_levels = len(filtered_asks)
        bid_levels = len(filtered_bids)

        total_buy = bid_vol
        total_sell = ask_vol
        dominance = round((total_buy - total_sell) / (total_buy + total_sell + Decimal('1e-8')) * 100)

        emoji = "üîº" if dominance > 0 else "üîΩ"
        trend = "üìâ –ü—Ä–æ–¥–∞–≤—Ü—ã –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç" if dominance < 0 else "üìà –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç"

        lines.append(f"üîπ {label}\n" +
                     f"üîª –°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ: {resistance[0]:,.2f} $ ({resistance[1]:.0f} BTC)" + "\n" +
                     f"üìä –ü–æ–¥–¥–µ—Ä–∂–∫–∞: {support[0]:,.2f} $ ({support[1]:.0f} BTC)" + "\n" +
                     f"üîº –î–∏–∞–ø–∞–∑–æ–Ω: {lower:,.2f} ‚Äî {upper:,.2f}" + "\n" +
                     f"üî∫ ask —É—Ä–æ–≤–Ω–µ–π: {ask_levels} | üîΩ bid —É—Ä–æ–≤–Ω–µ–π: {bid_levels}" + "\n" +
                     f"üí∞ –û–±—ä—ë–º: üîª {total_sell:.2f} BTC / ${total_sell * mid_price:,.0f} | üî∫ {total_buy:.2f} BTC / ${total_buy * mid_price:,.0f}" + "\n" +
                     f"üü¢ {trend} –Ω–∞ {abs(dominance)}%\n")

    # –ê–≤—Ç–æ —Ç–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è –µ—Å–ª–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–∏
    if dominance > 10:
        support_price = support[0]
        sl = support_price * Decimal("0.997")
        tp = support_price * Decimal("1.005")
        tp2 = support_price * Decimal("1.01")
        lines.append("\nüìå üåù <b>–¢–æ—Ä–≥–æ–≤–∞—è –∏–¥–µ—è:</b>")
        lines.append("<pre>–ü–∞—Ä–∞–º–µ—Ç—Ä         | –ó–Ω–∞—á–µ–Ω–∏–µ\n" +
                     "------------------|-------------------------------\n" +
                     f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π       | –õ–æ–Ω–≥ –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ {support_price * Decimal('0.997'):.0f}‚Äì{support_price:.0f} $\n" +
                     f"‚õîÔ∏è –°—Ç–æ–ø-–ª–æ—Å—Å      | –ù–∏–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ‚Üí {sl:.0f} $\n" +
                     f"üåü –¶–µ–ª—å           | {tp:.0f}‚Äì{tp2:.0f} $ (–∑–∞—Ö–≤–∞—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏)\n" +
                     f"üîé –î–æ–ø. —Ñ–∏–ª—å—Ç—Ä    | –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—ä—ë–º–æ–º / —Å–≤–µ—á–æ–π 1‚Äì5–º</pre>")

    return "\n".join(lines)


async def handle_watch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = await get_orderbook_stats()
    await update.message.reply_text(msg, parse_mode="HTML")


if __name__ == '__main__':
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("watch", handle_watch))
    app.run_polling()
